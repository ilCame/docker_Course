####################
Docker Compose

docker compose is a tool that allow to replace multiple/single docker builds and docker run comands with just one configuration file;

docker compose will not replace dockerFiles, they work together, docker compose does not replace images or containers and also docker compose is not suited for managing multiple containers on different host machine.


std_open: true
    tty: true

in the docker compose file, is used for setting the container in interactive mode. 
std_open is used to let docker know that the service need an open input connection.

#####################

Docker Utility Contaniners

Utility containers are containers witch only have a certain environment in them, the idea is that they don't start an application when you run them but
you run them with some command specified by you and execute a certain task.

#####################

A Laravek & PHP Dockerized Project

./src:/var/www/html:delegated on volumes on the docker file, the delegated part is used so that if the container should write some data there it's not instantly reflected back to the host machine, instead it is besically processed in bathces. it'a optimization. 

#####################

Deploying Docker containers:

In a Dev environment containers should encapsulate the runtime environment but not necessarily the code. use Bind Mounts to provide your local host
project files to the running containers. this allows for instant updates without restarting the container.

For production the container works standalone, you should not have source code on your remote machine. image / container is the single source truth. so in production we will use copy instead of bind mounts to copy a code snapshot into the image. this ensures that evry image runs without any extra, surrounding configuration or code


default.conf is a special file that can be merged into a bigger nginx config

this is put in the docker-compose file and can be use to create or modify a entrypoint on a docker file
entrypoint: entrypoint

######################

Deploying Docker containers:

In a Dev environment containers should encapsulate the runtime environment but not necessarily the code. use Bind Mounts to provide your local host
project files to the running containers. this allows for instant updates without restarting the container.

For production the container works standalone, you should not have source code on your remote machine. image / container is the single source truth. so in production we will use copy instead of bind mounts to copy a code snapshot into the image. this ensures that evry image runs without any extra, surrounding configuration or code

Docker container advantages:

1) only docker need to be installed (no other runtimes or tools)
2) uploading our code is very easy, since we simply pull the latest image
3) it's the exact same app and environment as on our machine

Disadvantages:

1) we fully own the remote machine so we are responable for it. we need to ensure security and ensure that all the key system software remain updated;
2) we need to keep essentials software updated
3) manage network and security groups/firewall 
4) SSHing into the machine to manage it can be annoying

Development to production: 

Bind Mounts should not be used in production, containerized apps might need a build step (for example React apps), multi-container projects might need to be split (or should be split) across multiple hosts / remote machine but we also have a trade-offs between control and responsability.